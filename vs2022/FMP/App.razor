@using System.Reflection
@using Grpc.Net.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Microsoft.Extensions.Logging
@using System.Runtime.Loader
@using XTC.FMP.APP.Blazor.Proto
@using XTC.FMP.MOD.StartKit.LIB.Proto;
@using XTC.FMP.LIB.MVCS
@inject LazyAssemblyLoader assemblyLoader_
@inject Logger logger_
@inject HttpClient httpClient_
@inject GrpcChannel channel_
@inject Framework framework_
@inject ModuleRouter moduleRouter_

<Router AppAssembly="@typeof(Program).Assembly"
        AdditionalAssemblies="@lazyLoadedAssemblies"
        OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(BasicLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(BasicLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
<AntContainer />

@code {
    private List<Assembly> lazyLoadedAssemblies = new();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
            lazyLoadedAssemblies.AddRange(await moduleRouter_.Route(args.Path, httpClient_, channel_, framework_, logger_));
        }
        catch (Exception ex)
        {
            logger_.Error(ex.Message);
            logger_.Exception(ex);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

         var grpcClient1 = new Healthy.HealthyClient(channel_);
        try{
            var response = await grpcClient1.EchoAsync(new EchoRequest(){Msg="hehe"});
            logger_.Info(response.Msg);
        }
        catch(Exception ex)
        {
            logger_.Error(ex.Message);
        }

        var grpcClient = new Dummy.DummyClient(channel_);
        try{
            await grpcClient.CallAsync(new CallRequest(){StringValue = "string value"});
        }
        catch(Exception ex)
        {
            logger_.Error(ex.Message);
        }
    }

    
}