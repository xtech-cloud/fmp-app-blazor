@using System.Reflection
@using Grpc.Net.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using System.Runtime.Loader
@using Microsoft.Extensions.Options
@using XTC.FMP.APP.Blazor.Proto
@using XTC.FMP.LIB.MVCS
@inject LazyAssemblyLoader assemblyLoader_
@inject Logger logger_
@inject ScalingManager scalingMgr_
@inject Framework framework_
@inject ModuleRouter moduleRouter_
@inject IConfiguration configuration_

<Router AppAssembly="@typeof(Program).Assembly"
        AdditionalAssemblies="@lazyLoadedAssemblies"
        OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(BasicLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(BasicLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
<AntContainer />

@code {
    private List<Assembly> lazyLoadedAssemblies = new();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
            lazyLoadedAssemblies.AddRange(await moduleRouter_.Route(args.Path, scalingMgr_, framework_, logger_));
        }
        catch (Exception ex)
        {
            logger_.Error(ex.Message);
            logger_.Exception(ex);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var section = configuration_.GetSection("Scaling");
        var scalingSettings = new ScalingSettings();
        scalingSettings.Active = section.GetValue<bool>("Active");
        scalingSettings.Repository = section.GetValue<string>("Repository");
        scalingSettings.Environment = section.GetValue<string>("Environment");
        scalingSettings.Grpc = section.GetValue<string>("Grpc");
        scalingMgr_.settings = scalingSettings;
        scalingMgr_.SetRepositoryHttpClient(new Uri(scalingSettings.Repository));

        // 调用grpc的通信，以加载相关的库文件
        // ！！！ 缺少这个步骤，在发布为wasm后，动态加载库文件使用grpc通信会崩溃
        var grpcClient = new Dummy.DummyClient(scalingMgr_.dummyChannel);
        try
        {
            await grpcClient.CallAsync(new CallRequest() { StringValue = "string value" });
        }
        catch (Exception ex)
        {
            //logger_.Error(ex.Message);
        }
    }


}