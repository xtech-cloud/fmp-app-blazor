@using System.Reflection
@using Grpc.Net.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using System.Runtime.Loader
@using Microsoft.Extensions.Options
@using System.Buffers
@using Newtonsoft.Json
@using XTC.FMP.LIB.MVCS
@inject LazyAssemblyLoader assemblyLoader_
@inject Logger logger_
@inject RuntimeScalingManager scalingMgr_
@inject Framework framework_
@inject ModuleRouter moduleRouter_
@inject IConfiguration configuration_
@inject NavigationManager navigationMgr_

<Router AppAssembly="@typeof(Program).Assembly"
        AdditionalAssemblies="@lazyLoadedAssemblies"
        OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(BasicLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(BasicLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
<AntContainer />

@code {
    private List<Assembly> lazyLoadedAssemblies = new();
    private List<string> lazyLoadedPath = new();
    private List<Type> dependencies = new();
    private string parameterVendorUuid_;
    private string __parameterPermission_;


    private async Task OnNavigateAsync(NavigationContext args)
    {
        if (string.IsNullOrEmpty(args.Path))
            return;
        if (args.Path.Equals("/"))
            return;
        string path = args.Path;
        // 去除参数
        int parameterIndex = path.IndexOf("?");
        if (parameterIndex > 0)
        {
            path = path.Substring(0, parameterIndex);
        }
        if (lazyLoadedPath.Contains(path))
            return;

        if (dependencies.Count == 0)
        {
            loadDependencies();
        }

        try
        {
            lazyLoadedAssemblies.AddRange(await moduleRouter_.Route(path, scalingMgr_, framework_, logger_));
            lazyLoadedPath.Add(path);
        }
        catch (Exception ex)
        {
            logger_.Error(ex.Message);
            logger_.Exception(ex);
        }
    }

    public override async Task SetParametersAsync(ParameterView _parameters)
    {
        // 解析参数
        parseUri();

        // 临时
        logger_.Trace("permission is {0}", __parameterPermission_);
        if (!string.IsNullOrWhiteSpace(__parameterPermission_))
        {
            var permissions = await scalingMgr_.internalClient.GetFromJsonAsync<string[]>("data/permissions_" + __parameterPermission_ + ".json");
            var permissionMap = new Dictionary<string, string>();
            foreach (var p in permissions)
            {
                permissionMap[p] = "";
            }
            logger_.Trace("update {0} permissions", permissionMap.Count);
            moduleRouter_.UpdatePermissionS(permissionMap);
        }

        var section = configuration_.GetSection("RuntimeScaling");
        var scalingSettings = new RuntimeScalingSettings();
        scalingSettings.Active = section.GetValue<bool>("Active");
        scalingSettings.RepositoryAddress = section.GetValue<string>("RepositoryAddress");
        scalingSettings.Environment = section.GetValue<string>("Environment");
        scalingSettings.Grpc = section.GetValue<string>("Grpc");
        scalingSettings.VendorAddress = section.GetValue<string>("VendorAddress");
        scalingMgr_.SetRepositoryHttpClient(new Uri(scalingSettings.RepositoryAddress));
        scalingMgr_.SetVendorHttpClient(new Uri(scalingSettings.VendorAddress));
        // 使用vendor
        if (!string.IsNullOrWhiteSpace(parameterVendorUuid_))
        {
            scalingMgr_.vendor = parameterVendorUuid_;
            //navigationMgr_.NavigateTo("/");
        }
        scalingMgr_.settings = scalingSettings;
        if (scalingSettings.Active)
        {
            await scalingMgr_.FetchData();
        }

        await base.SetParametersAsync(_parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void loadDependencies()
    {
        dependencies.Add(typeof(InputFile));
        dependencies.Add(typeof(IBrowserFile));
        dependencies.Add(typeof(IBufferWriter<string>));
    }

    private void parseUri()
    {
        var query = new Uri(navigationMgr_?.Uri ?? "").Query;
        var vals = query.Replace("?", "").Split("&");
        __parameterPermission_ = "";
        parameterVendorUuid_ = null;
        foreach (var val in vals)
        {
            if (val.Contains("permissions="))
            {
                __parameterPermission_ = val.Replace("permissions=", "");
            }
            else if (val.Contains("vendor="))
            {
                parameterVendorUuid_ = val.Replace("vendor=", "");
            }
        }
    }
}