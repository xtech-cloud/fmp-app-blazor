@using System.Reflection
@using Grpc.Net.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Microsoft.Extensions.Logging
@using System.Runtime.Loader
@using XTC.FMP.LIB.MVCS
@inject LazyAssemblyLoader AssemblyLoader
@inject ILogger<App> Logger
@inject HttpClient httpClient
@inject GrpcChannel channel
@inject Framework framework
@inject ModuleManager moduleManager

<Router AppAssembly="@typeof(Program).Assembly"
        AdditionalAssemblies="@lazyLoadedAssemblies"
        OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(BasicLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(BasicLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
<AntContainer />

@code {
    private List<Assembly> lazyLoadedAssemblies = new();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
            if (args.Path == "xtc/startkit/healthy")
            {
                var assemblyProto = await moduleManager.Load("modules/fmp-startkit-lib-proto.dll", httpClient);
                lazyLoadedAssemblies.Add(assemblyProto);

                var assemblyBridge = await moduleManager.Load("modules/fmp-startkit-lib-bridge.dll", httpClient);
                lazyLoadedAssemblies.Add(assemblyBridge);

                var assemblyMVCS = await moduleManager.Load("modules/fmp-startkit-lib-mvcs.dll", httpClient);
                lazyLoadedAssemblies.Add(assemblyMVCS);

                string optionsClass = "XTC.FMP.MOD.StartKit.LIB.MVCS.Options";
                object instanceOptions = assemblyMVCS.CreateInstance(optionsClass);
                Type options = assemblyMVCS.GetType(optionsClass);
                MethodInfo miSetChannel = options.GetMethod("setChannel");
                miSetChannel.Invoke(instanceOptions,  new object[] { channel });

                string entryClass = "XTC.FMP.MOD.StartKit.LIB.MVCS.Entry";
                object instanceEntry = assemblyMVCS.CreateInstance(entryClass);
                Type entry = assemblyMVCS.GetType(entryClass);
                MethodInfo miInject = entry.GetMethod("Inject");
                miInject.Invoke(instanceEntry, new object[] { framework, instanceOptions });
                MethodInfo miRegister = entry.GetMethod("DynamicRegister");
                miRegister.Invoke(instanceEntry, null);
                framework.PushUserData("XTC.FMP.MOD.StartKit.LIB.MVCS.Entry", entry as IUserData);

                var assemblyRazor = await moduleManager.Load("modules/fmp-startkit-lib-razor.dll", httpClient);
                lazyLoadedAssemblies.Add(assemblyRazor);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error: {Message}", ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    
}